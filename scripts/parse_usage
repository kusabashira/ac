#!/usr/bin/perl
use strict;
use warnings;
use utf8;

sub parse_usage {
  my $name = shift;
  my $command = {
    name  => $name,
    flags => [],
  };
  open my $usage, '-|', "$name --help 2>&1" 
    or die "can't execute $name: $!";
  while (<$usage>) {
    next if !/\G *(?=-)/gc;
    my $flag = {
      short       => [],
      long        => [],
      arg         => '',
      description => '',
    };
    while (/-(\w)(?=[ ,]|$)/gc) {
      push @{$flag->{short}}, $1;
      $flag->{arg} = $1 if /\G[ =]([\w-]+)/gc;
    }
    while (/--([\w-]+)(?=[= ,]|$)?/gc) {
      push @{$flag->{long}}, $1;
      $flag->{arg} = $1 if /\G[ =]([\w-]+)/gc;
    }
    if (/\G +(.*)/) {
      $flag->{description} = $1;
    } else {
      $flag->{description} = <$usage>;
      $flag->{description} =~ s/^ *(.*)\n/$1/;
    }
    push @{$command->{flags}}, $flag;
  }
  return $command;
}

sub yaml_escape {
  my $str = shift;
  $str =~ s/'/''/g;;
  return $str;
}

sub yaml_value {
  my $value = shift;
  if (ref($value) eq 'ARRAY') {
    return "['" . join("', '", map { yaml_escape($_) } @$value) . "']";
  } else {
    return "'" . yaml_escape($value) . "'";
  }
}

sub is_empty {
  my $item = shift;
  my $value = yaml_value($item);
  return $value eq "''" || $value eq "['']";
}

sub yaml_item {
  my ($flag, $keys, $prefix) = @_;
  my $propaties = [];
  for my $key (@$keys) {
    next if is_empty($flag->{$key});
    push @$propaties, "$key: " . yaml_value($flag->{$key});
  }
  for (my $i = 0; $i < @$propaties; $i++) {
    $propaties->[$i] = $prefix . ($i == 0? '- ': '  ') . $propaties->[$i];
  }
  return @$propaties;
}

sub dump_source {
  my $command = shift;
  my $lines = [];
  push @$lines, "# Generated by https://raw.githubusercontent.com/kusabashira/ac/master/scripts/parse_usage";
  push @$lines, "---";
  push @$lines, "name: " . yaml_value($command->{name});
  push @$lines, "flags:";
  for my $flag (@{$command->{flags}}) {
    my $propaties = [qw(short long arg description)];
    push @$lines, yaml_item($flag, $propaties, '  ');
    push @$lines, '';
  }
  return join "\n", @$lines;
}

if (@ARGV < 1 || $ARGV[0] eq '--help') {
  print STDERR "usage: parse_usage <command>\n";
  exit 2;
}
my $name = $ARGV[0];
my $command = parse_usage($name);
print dump_source $command;
